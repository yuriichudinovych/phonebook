{"version":3,"file":"static/js/795.ea73f02d.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const getContacts = store => store.contacts;\n\nexport const getFilter = store => store.filter;\n\nexport const getFilteredContacts = ({ contacts: { items }, filter }) => {\n  if (!filter) {\n    return items;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n  const FilteredContacts = items.filter(({ name }) => {\n    const normalizedName = name.toLowerCase();\n\n    return normalizedName.includes(normalizedFilter);\n  });\n  return FilteredContacts;\n};\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { Form, Label, Input } from 'globalStyles';\nimport { Button } from 'globalStyles';\n\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const { items } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const isDuplicate = ({ name }) => {\n    const result = items.find(contact => contact.name === name);\n    return result;\n  };\n  const onAddContacts = contact => {\n    if (isDuplicate(contact)) {\n      return alert(`${contact.name} - is already on the site`);\n    }\n    const action = addContact(contact);\n    dispatch(action);\n  };\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    onAddContacts({\n      name: name,\n      number: number,\n    });\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = evt => {\n    const { name, value } = evt.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.log('Cannot find fild');\n    }\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Label htmlFor={nameInputId}>\n          Name\n          <Input\n            name=\"name\"\n            type=\"text\"\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label htmlFor={numberInputId}>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={numberInputId}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">add contact</Button>\n      </Form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const StyledContactList = styled.ul`\n  & li {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    &:not(:last-child) {\n      margin-bottom: ${p => p.theme.space[3]}px;\n    }\n\n    /* & button {\n      padding: ${p => p.theme.space[2]}px;\n      border: ${p => p.theme.borders.normal + p.theme.colors.black};\n      border-radius: 5px;\n      display: block;\n      &:hover {\n        background-color: ${p => p.theme.colors.accent};\n        color: ${p => p.theme.colors.white};\n        border-color: ${p => p.theme.colors.accent};\n      }\n    } */\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { StyledContactList } from './ContactList.styled';\nimport { Button } from 'globalStyles';\n\nimport { getFilteredContacts } from 'redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { removeContact } from '../../redux/contacts/contacts-operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const onRemoveContacts = id => {\n    const action = removeContact(id);\n    dispatch(action);\n  };\n  return (\n    <>\n      <StyledContactList>\n        {contacts.map(({ name, number, id }) => {\n          return (\n            <li key={id}>\n              <p>{`${name}: ${number}`}</p>\n              <Button onClick={() => onRemoveContacts(id)}>delete</Button>\n            </li>\n          );\n        })}\n      </StyledContactList>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default ContactList;\n","import styled from '@emotion/styled';\n// import { Input } from 'globalStyles';\n\nexport const StyledFilter = styled.label`\n  margin: 0 auto;\n  margin-bottom: 16px;\n  display: block;\n  width: 320px;\n`;\n","import PropTypes from 'prop-types';\n\nimport { StyledFilter } from './Filter.styled';\nimport { getFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Input } from 'globalStyles';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChange = evt => {\n    const { value } = evt.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <>\n      <StyledFilter>\n        Find contacts by name\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={handleChange}\n        />\n      </StyledFilter>\n    </>\n  );\n};\n\nFilter.propsTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\nexport const Container = styled.div`\n  padding: ${p => p.theme.space[4]}px;\n  background-color: ${p => p.theme.colors.muted};\n  border: ${p => p.theme.borders.normal};\n  border-radius: ${p => p.theme.radii.md};\n  margin: 0 auto;\n  max-width: 350px;\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n`;\n\nexport const SecondTitle = styled.h2`\n  text-align: center;\n  padding: 0 0 ${p => p.theme.space[4]}px 0;\n`;\n","import { useEffect } from 'react';\n\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n// import { UserMenu } from 'components/UserMenu/UserMenu';\n\nimport { Title, SecondTitle } from './Contacts.styled';\nimport { Section, SectionContainer } from 'globalStyles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\n\nconst Contacts = () => {\n  const { items, isLoading } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section>\n        <SectionContainer>\n          <Title>Phonebook</Title>\n          <ContactForm />\n        </SectionContainer>\n      </Section>\n      <Section>\n        <SectionContainer>\n          <SecondTitle>Contacts</SecondTitle>\n          {items.length > 0 && (\n            <>\n              <Filter />\n              <ContactList />\n            </>\n          )}\n          {!isLoading && items.length === 0 && <p>Contacts are not find.</p>}\n          {isLoading && <p>...is loading</p>}\n        </SectionContainer>\n      </Section>\n    </>\n  );\n};\n\nexport default Contacts;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getContacts","store","contacts","getFilter","filter","getFilteredContacts","items","normalizedFilter","toLowerCase","name","includes","useSelector","dispatch","useDispatch","onAddContacts","contact","find","isDuplicate","alert","action","addContact","useState","setName","number","setNumber","nameInputId","numberInputId","handleChange","evt","currentTarget","value","console","log","onSubmit","preventDefault","htmlFor","type","onChange","pattern","title","required","StyledContactList","styled","p","theme","space","borders","normal","colors","black","accent","white","map","onClick","removeContact","onRemoveContacts","StyledFilter","Filter","target","setFilter","propsTypes","PropTypes","Title","muted","radii","md","SecondTitle","isLoading","useEffect","fetchContacts","length","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}